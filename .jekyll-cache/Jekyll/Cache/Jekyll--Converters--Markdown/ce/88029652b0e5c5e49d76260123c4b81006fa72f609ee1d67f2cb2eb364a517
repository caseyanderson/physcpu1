I"”#<h2 id="materials">Materials</h2>

<ul>
  <li>laptop</li>
  <li>internet access</li>
  <li><a href="https://www.adafruit.com/product/3591">Adafruit HUZZAH32</a></li>
  <li><a href="https://www.adafruit.com/product/592">USB cable - USB A to Micro-B - 3 foot long</a> (or similar)</li>
  <li>1x Breadboard</li>
  <li>1x TIP120 (or N-channel MOSFET)</li>
  <li>1x diode (1N4001)</li>
  <li>1x 10K resistor</li>
  <li>1x external power supply</li>
  <li>1x SPST button</li>
</ul>

<h2 id="transistors">Transistors</h2>

<p><em>Note: props to <a href="http://bildr.org/2011/03/high-power-control-with-arduino-and-tip120/">this</a> fantastic article</em></p>

<p>Transistors are three pin components capable of amplifying or switching signals. In Physical Computing we typically use them to control high voltage devices (like motors, lights, or solenoids) by quickly toggling a pin between <code class="language-plaintext highlighter-rouge">HIGH</code> and <code class="language-plaintext highlighter-rouge">LOW</code> (i.e. <code class="language-plaintext highlighter-rouge">PWM</code>).</p>

<p>While there are a variety of different types of transistors, we will focus on the <code class="language-plaintext highlighter-rouge">TIP120</code>, a pinout for which can be found below:</p>

<p><img src="http://physcpu1.caseyanderson.com//assets/tip120_pinout.jpg" alt="" /></p>

<ol>
  <li>Base -&gt; Control</li>
  <li>Collector -&gt; Input</li>
  <li>Emitter -&gt; Output</li>
</ol>

<p>More specifically, transistors are based on the following phenomena: a small current flowing between the base (<code class="language-plaintext highlighter-rouge">B</code>) and emitter (<code class="language-plaintext highlighter-rouge">E</code>) causes a larger current to flow between the collector (<code class="language-plaintext highlighter-rouge">C</code>) and emitter (<code class="language-plaintext highlighter-rouge">E</code>).</p>

<p><img src="http://physcpu1.caseyanderson.com//assets/adafruit_transistor.png" alt="" /></p>

<h2 id="esp32--tip120">ESP32 + TIP120</h2>

<h3 id="schematic">Schematic</h3>

<p><img src="http://physcpu1.caseyanderson.com//assets/tip120_motor_light_sol_schematic.jpg" alt="" /></p>

<h3 id="hookup-pattern">Hookup Pattern</h3>

<p><img src="http://physcpu1.caseyanderson.com//assets/fritzing/mosfet_pwm_motor.png" alt="" /></p>

<p>After wiring up a <code class="language-plaintext highlighter-rouge">TIP120</code>, <code class="language-plaintext highlighter-rouge">diode</code>, <code class="language-plaintext highlighter-rouge">resistor</code>, and <code class="language-plaintext highlighter-rouge">motor</code> (as shown above), one could test controlling the motor with the following:</p>

<ol>
  <li>import <code class="language-plaintext highlighter-rouge">Pin</code> and <code class="language-plaintext highlighter-rouge">PWM</code> from <code class="language-plaintext highlighter-rouge">machine</code>: <code class="language-plaintext highlighter-rouge">from machine import Pin, PWM</code></li>
  <li>create a <code class="language-plaintext highlighter-rouge">PWM</code> object and store it at <code class="language-plaintext highlighter-rouge">pwm21</code>: <code class="language-plaintext highlighter-rouge">pwm21 = PWM(Pin(21), freq=20000, duty=0)</code></li>
  <li>set the <code class="language-plaintext highlighter-rouge">duty cycle</code> to 50%: <code class="language-plaintext highlighter-rouge">pwm21.duty(512)</code></li>
  <li>set the <code class="language-plaintext highlighter-rouge">duty cycle</code> to 100%: <code class="language-plaintext highlighter-rouge">pwm21.duty(1023)</code></li>
  <li>stop the motor: <code class="language-plaintext highlighter-rouge">pwm21.duty(0)</code></li>
  <li>turn off <code class="language-plaintext highlighter-rouge">PWM</code> mode on pin: <code class="language-plaintext highlighter-rouge">pwm21.deinit()</code></li>
  <li><code class="language-plaintext highlighter-rouge">Ctl-A</code> <code class="language-plaintext highlighter-rouge">Ctl-\</code> to exit</li>
</ol>

<h2 id="tip120-as-digital-switch">TIP120 as Digital Switch</h2>

<p>When the <code class="language-plaintext highlighter-rouge">ESP32</code> sends a <code class="language-plaintext highlighter-rouge">HIGH</code> signal to the <code class="language-plaintext highlighter-rouge">TIP120</code> <code class="language-plaintext highlighter-rouge">Base</code> the transistor switches, connecting the <code class="language-plaintext highlighter-rouge">Collector</code> and <code class="language-plaintext highlighter-rouge">Emitter</code> pins. If <code class="language-plaintext highlighter-rouge">C</code> and <code class="language-plaintext highlighter-rouge">E</code> are connected the circuit is <code class="language-plaintext highlighter-rouge">closed</code> (or <code class="language-plaintext highlighter-rouge">complete</code>), allowing current to travel to the motor which causes it to spin.</p>

<p>When the <code class="language-plaintext highlighter-rouge">ESP32</code> sends a <code class="language-plaintext highlighter-rouge">LOW</code> signal to the <code class="language-plaintext highlighter-rouge">TIP120</code> <code class="language-plaintext highlighter-rouge">Base</code> the transistor disconnects the <code class="language-plaintext highlighter-rouge">Collector</code> and <code class="language-plaintext highlighter-rouge">Emitter</code>. This results in an <code class="language-plaintext highlighter-rouge">open</code> (or <code class="language-plaintext highlighter-rouge">incomplete</code>) circuit and the motor stops spinning.</p>

<p>The speed (rate of rotation) of the motor is controlled by how long the <code class="language-plaintext highlighter-rouge">PWM</code> pin is <code class="language-plaintext highlighter-rouge">HIGH</code> compared to the length of a single period (<code class="language-plaintext highlighter-rouge">LOW</code> plus <code class="language-plaintext highlighter-rouge">HIGH</code> time), otherwise known as the <code class="language-plaintext highlighter-rouge">duty cycle</code>.</p>

<p>Note: the exact same wiring pattern used to control a motor (see schematic above) can be used to control a large light or solenoid, one simply needs to remove the motor and replace with one of the other actuators. Certain solenoids will require changes to software to reflect their physical properties.</p>

<h3 id="hookup-pattern-1">Hookup Pattern</h3>

<p><img src="http://physcpu1.caseyanderson.com//assets/fritzing/button_motor.png" alt="" /></p>

<p>In the next example a button, added to pin <code class="language-plaintext highlighter-rouge">12</code>, controls whether the motor spins or not.</p>

<p><em>For Example</em></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># digital in to pwm out
</span>
<span class="kn">from</span> <span class="nn">machine</span> <span class="kn">import</span> <span class="n">ADC</span><span class="p">,</span> <span class="n">Pin</span><span class="p">,</span> <span class="n">PWM</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep_ms</span>

<span class="n">motorPin</span> <span class="o">=</span> <span class="n">Pin</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>
<span class="n">pwm</span> <span class="o">=</span> <span class="n">PWM</span><span class="p">(</span><span class="n">motorPin</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="mi">20000</span><span class="p">,</span> <span class="n">duty</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="n">button</span> <span class="o">=</span> <span class="n">Pin</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">Pin</span><span class="p">.</span><span class="n">IN</span><span class="p">,</span> <span class="n">Pin</span><span class="p">.</span><span class="n">PULL_UP</span><span class="p">)</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">button</span><span class="p">.</span><span class="n">value</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Spin"</span><span class="p">)</span>
        <span class="n">pwm</span><span class="p">.</span><span class="n">duty</span><span class="p">(</span><span class="mi">1023</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Stop"</span><span class="p">)</span>
        <span class="n">pwm</span><span class="p">.</span><span class="n">duty</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">sleep_ms</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div></div>
:ET