I"Y<h2 id="materials">Materials</h2>

<ul>
  <li>laptop</li>
  <li>internet access</li>
  <li><a href="https://www.adafruit.com/product/3591">Adafruit HUZZAH32</a></li>
  <li><a href="https://www.adafruit.com/product/592">USB cable - USB A to Micro-B - 3 foot long</a> (or similar)</li>
  <li>1x Breadboard</li>
  <li>1x Potentiometer (or Voltage Divider Sensor)</li>
  <li>1x LED (w/ 1x Resistor [220, 270, 330])</li>
</ul>

<h2 id="analogin_pwmoutpy">analogIn_PWMOut.py</h2>

<h3 id="hookup-pattern">Hookup Pattern</h3>

<p><img src="http://0.0.0.0:4000/assets/fritzing/force_analogIn_PWMOut.png" alt="" /></p>

<ol>
  <li>Connect Sensor Pin3 to <code class="language-plaintext highlighter-rouge">ESP32</code> <code class="language-plaintext highlighter-rouge">3V</code></li>
  <li>Connect Sensor Pin2 to <code class="language-plaintext highlighter-rouge">ESP32</code> <code class="language-plaintext highlighter-rouge">34</code></li>
  <li>Connect Resistor Pin2 to <code class="language-plaintext highlighter-rouge">ESP32</code> <code class="language-plaintext highlighter-rouge">GND</code></li>
  <li>From pin 27, connect the following in series: a Resistor to an <code class="language-plaintext highlighter-rouge">LED</code> to <code class="language-plaintext highlighter-rouge">GND</code></li>
</ol>

<p>Follow along on your <code class="language-plaintext highlighter-rouge">ESP32</code>:</p>

<p><em>For Example</em></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># analog in to pwm out
</span>
<span class="kn">from</span> <span class="nn">machine</span> <span class="kn">import</span> <span class="n">ADC</span><span class="p">,</span> <span class="n">Pin</span><span class="p">,</span> <span class="n">PWM</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep_ms</span>

<span class="n">ledPin</span> <span class="o">=</span> <span class="n">Pin</span><span class="p">(</span><span class="mi">27</span><span class="p">)</span>
<span class="n">potPin</span> <span class="o">=</span> <span class="n">Pin</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span>

<span class="n">pot</span> <span class="o">=</span> <span class="n">ADC</span><span class="p">(</span><span class="n">potPin</span><span class="p">)</span>
<span class="n">pot</span><span class="p">.</span><span class="n">atten</span><span class="p">(</span><span class="n">ADC</span><span class="p">.</span><span class="n">ATTN_11DB</span><span class="p">)</span>
<span class="n">pot</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="n">ADC</span><span class="p">.</span><span class="n">WIDTH_10BIT</span><span class="p">)</span> <span class="c1"># 0 - 1023
</span>
<span class="n">pwm</span> <span class="o">=</span> <span class="n">PWM</span><span class="p">(</span><span class="n">Pin</span><span class="p">(</span><span class="mi">27</span><span class="p">),</span> <span class="n">freq</span><span class="o">=</span><span class="mi">20000</span><span class="p">,</span> <span class="n">duty</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">sensor_val</span> <span class="o">=</span> <span class="n">pot</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">sensor_val</span><span class="p">)</span>
    <span class="n">pwm</span><span class="p">.</span><span class="n">duty</span><span class="p">(</span><span class="n">sensor_val</span><span class="p">)</span>
    <span class="n">sleep_ms</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>

</code></pre></div></div>

<ul>
  <li>note that the analog input, here stored at <code class="language-plaintext highlighter-rouge">sensor_value</code>, is passed to <code class="language-plaintext highlighter-rouge">pwm.duty()</code>. This allows the sensor value to control the brightness of the <code class="language-plaintext highlighter-rouge">LED</code>.</li>
</ul>

<h2 id="thresholdpy">threshold.py</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">'''
threshold.py
'''</span>

<span class="kn">from</span> <span class="nn">machine</span> <span class="kn">import</span> <span class="n">ADC</span><span class="p">,</span> <span class="n">Pin</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep_ms</span>

<span class="n">potPin</span> <span class="o">=</span> <span class="n">Pin</span><span class="p">(</span><span class="mi">34</span><span class="p">,</span> <span class="n">Pin</span><span class="p">.</span><span class="n">IN</span><span class="p">)</span>
<span class="n">led</span> <span class="o">=</span> <span class="n">Pin</span><span class="p">(</span><span class="mi">27</span><span class="p">,</span> <span class="n">Pin</span><span class="p">.</span><span class="n">OUT</span><span class="p">)</span>

<span class="n">pot</span> <span class="o">=</span> <span class="n">ADC</span><span class="p">(</span><span class="n">potPin</span><span class="p">)</span>
<span class="n">pot</span><span class="p">.</span><span class="n">atten</span><span class="p">(</span><span class="n">ADC</span><span class="p">.</span><span class="n">ATTN_11DB</span><span class="p">)</span>
<span class="n">pot</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="n">ADC</span><span class="p">.</span><span class="n">WIDTH_10BIT</span><span class="p">)</span> <span class="c1"># 0 - 1023
</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="n">sensor_val</span> <span class="o">=</span> <span class="n">pot</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">sensor_val</span> <span class="o">&gt;=</span> <span class="mi">512</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"crossed threshold!"</span><span class="p">)</span>
    <span class="n">led</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">led</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="n">sleep_ms</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>

</code></pre></div></div>

<ul>
  <li>above we use a <code class="language-plaintext highlighter-rouge">boolean</code> test to see if the <code class="language-plaintext highlighter-rouge">sensor_val</code> is currently  greater than or equal to (<code class="language-plaintext highlighter-rouge">&gt;=</code>) <code class="language-plaintext highlighter-rouge">512</code> (50% of ADC value on pin <code class="language-plaintext highlighter-rouge">34</code>). If this test returns <code class="language-plaintext highlighter-rouge">True</code> the <code class="language-plaintext highlighter-rouge">LED</code> will turn on, otherwise it will turn off.</li>
</ul>
:ET